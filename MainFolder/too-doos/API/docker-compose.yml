version: '3.8'

services:
  # 1) PostgreSQL dla TooDooS
  too-doos-db:
    image: postgres:15-alpine
    container_name: too-doos-db
    restart: unless-stopped
    secrets:
      - db_password
    environment:
      POSTGRES_DB: too_doos
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d too_doos"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - common-net

  # 2) API Express + Prisma + NextAuth
  too-doos-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_VERSION: 18-alpine
    container_name: too-doos-api
    restart: unless-stopped
    extra_hosts:
      - "auth-keycloak:host-gateway"
    ports:
      - "5000:5000"
    depends_on:
      too-doos-db:
        condition: service_healthy
    secrets:
      - db_password
    environment:
      NODE_ENV: production
      KEYCLOAK_ISSUER: http://auth-keycloak:8080/realms/too-doos

      # <<< DODANE:
      DATABASE_URL: postgresql://postgres:postgres@too-doos-db:5432/too_doos?schema=public

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    entrypoint:
      - "/usr/local/bin/entrypoint.sh"
    networks:
      - common-net

  # 3) Frontend Next.js + NextAuth (przeglÄ…darka)
  too-doos-frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: too-doos-frontend
    restart: unless-stopped
    environment:
      DEBUG: "next-auth:*"
      NEXTAUTH_DEBUG: "true"
    extra_hosts:
      - "auth-keycloak:host-gateway"
    ports:
      - "3000:3000"
    env_file:
      - ../frontend/.env.local
    depends_on:
      - too-doos-api
      - auth-keycloak
    networks:
      - common-net

  # 4) PostgreSQL dla Keycloak
  keycloak-db:
    image: postgres:15-alpine
    container_name: keycloak-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - common-net

  # 5) Keycloak
  auth-keycloak:
    image: quay.io/keycloak/keycloak:24.0.4
    container_name: auth-keycloak
    restart: unless-stopped
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_HEALTH_LIVENESS_ENABLED: "true"
      KC_HEALTH_READINESS_ENABLED: "true"
    ports:
      - "8080:8080"
    depends_on:
      keycloak-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - common-net

volumes:
  db-data:
  keycloak-db-data:

secrets:
  db_password:
    file: ./secrets/db_password.txt

networks:
  common-net:
    external: true